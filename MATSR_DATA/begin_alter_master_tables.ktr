<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>begin_alter_master_tables</name>
    <description/>
    <extended_description/>
    <trans_version/>
    <trans_type>Normal</trans_type>
    <directory>/</directory>
    <parameters>
    </parameters>
    <log>
      <trans-log-table>
        <connection/>
        <schema/>
        <table/>
        <size_limit_lines/>
        <interval/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STATUS</id>
          <enabled>Y</enabled>
          <name>STATUS</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
          <subject/>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
          <subject/>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
          <subject/>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
          <subject/>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
          <subject/>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
          <subject/>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>STARTDATE</id>
          <enabled>Y</enabled>
          <name>STARTDATE</name>
        </field>
        <field>
          <id>ENDDATE</id>
          <enabled>Y</enabled>
          <name>ENDDATE</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>DEPDATE</id>
          <enabled>Y</enabled>
          <name>DEPDATE</name>
        </field>
        <field>
          <id>REPLAYDATE</id>
          <enabled>Y</enabled>
          <name>REPLAYDATE</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>Y</enabled>
          <name>LOG_FIELD</name>
        </field>
        <field>
          <id>EXECUTING_SERVER</id>
          <enabled>N</enabled>
          <name>EXECUTING_SERVER</name>
        </field>
        <field>
          <id>EXECUTING_USER</id>
          <enabled>N</enabled>
          <name>EXECUTING_USER</name>
        </field>
        <field>
          <id>CLIENT</id>
          <enabled>N</enabled>
          <name>CLIENT</name>
        </field>
      </trans-log-table>
      <perf-log-table>
        <connection/>
        <schema/>
        <table/>
        <interval/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>SEQ_NR</id>
          <enabled>Y</enabled>
          <name>SEQ_NR</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>INPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>INPUT_BUFFER_ROWS</name>
        </field>
        <field>
          <id>OUTPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>OUTPUT_BUFFER_ROWS</name>
        </field>
      </perf-log-table>
      <channel-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>LOGGING_OBJECT_TYPE</id>
          <enabled>Y</enabled>
          <name>LOGGING_OBJECT_TYPE</name>
        </field>
        <field>
          <id>OBJECT_NAME</id>
          <enabled>Y</enabled>
          <name>OBJECT_NAME</name>
        </field>
        <field>
          <id>OBJECT_COPY</id>
          <enabled>Y</enabled>
          <name>OBJECT_COPY</name>
        </field>
        <field>
          <id>REPOSITORY_DIRECTORY</id>
          <enabled>Y</enabled>
          <name>REPOSITORY_DIRECTORY</name>
        </field>
        <field>
          <id>FILENAME</id>
          <enabled>Y</enabled>
          <name>FILENAME</name>
        </field>
        <field>
          <id>OBJECT_ID</id>
          <enabled>Y</enabled>
          <name>OBJECT_ID</name>
        </field>
        <field>
          <id>OBJECT_REVISION</id>
          <enabled>Y</enabled>
          <name>OBJECT_REVISION</name>
        </field>
        <field>
          <id>PARENT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>PARENT_CHANNEL_ID</name>
        </field>
        <field>
          <id>ROOT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>ROOT_CHANNEL_ID</name>
        </field>
      </channel-log-table>
      <step-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>N</enabled>
          <name>LOG_FIELD</name>
        </field>
      </step-log-table>
      <metrics-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>METRICS_DATE</id>
          <enabled>Y</enabled>
          <name>METRICS_DATE</name>
        </field>
        <field>
          <id>METRICS_CODE</id>
          <enabled>Y</enabled>
          <name>METRICS_CODE</name>
        </field>
        <field>
          <id>METRICS_DESCRIPTION</id>
          <enabled>Y</enabled>
          <name>METRICS_DESCRIPTION</name>
        </field>
        <field>
          <id>METRICS_SUBJECT</id>
          <enabled>Y</enabled>
          <name>METRICS_SUBJECT</name>
        </field>
        <field>
          <id>METRICS_TYPE</id>
          <enabled>Y</enabled>
          <name>METRICS_TYPE</name>
        </field>
        <field>
          <id>METRICS_VALUE</id>
          <enabled>Y</enabled>
          <name>METRICS_VALUE</name>
        </field>
      </metrics-log-table>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit>100</step_performance_capturing_size_limit>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
    <created_user>-</created_user>
    <created_date>2025/07/17 11:34:59.345</created_date>
    <modified_user>-</modified_user>
    <modified_date>2025/07/17 11:34:59.345</modified_date>
    <key_for_session_key/>
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
  </notepads>
  <connection>
    <name>KRA_HOP_db</name>
    <server>${HOP_DB_HOST}</server>
    <type>POSTGRESQL</type>
    <access>Native</access>
    <database>${HOP_DB_DATABASE}</database>
    <port>${HOP_DB_PORT}</port>
    <username>${HOP_DB_USER}</username>
    <password>${HOP_DB_PASSWORD}</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute>
        <code>EXTRA_OPTION_POSTGRESQL.stringtype</code>
        <attribute>unspecified</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>${HOP_DB_PORT}</attribute>
      </attribute>
      <attribute>
        <code>PRESERVE_RESERVED_WORD_CASE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_TIMESTAMP_DATA_TYPE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <order>
    <hop>
      <from>v1_migration_log</from>
      <to>v2_migration_log</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>v2_migration_log</from>
      <to>create_country</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>create_country</from>
      <to>create_state</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>create_state</from>
      <to>create_city</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>create_city</from>
      <to>create_postalcode</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>create_postalcode</from>
      <to>create_prooftypes</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>create_prooftypes</from>
      <to>create_bizenums</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>create_bizenums</from>
      <to>create_capabilities</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>create_capabilities</from>
      <to>create_roles</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>create_roles</from>
      <to>create_capability_role_map</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>create_capability_role_map</from>
      <to>create_visibility_classification</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>create_visibility_classification</from>
      <to>create_receligibility</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>create_receligibility</from>
      <to>create_itd_pan_status</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>create_itd_pan_status</from>
      <to>create_kycinternalstatusmap</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <step>
    <name>create_prooftypes</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS prooftypes
(
    id SERIAL PRIMARY KEY,
    category character varying(255) NOT NULL,
    code character varying(3),
    kracode character varying(3),
    okracode character varying(3),
    micode character varying(3),
    rtacode character varying(3),
    miicode character varying(3),
    issuer character varying(255),
    label character varying(255) NOT NULL,
    req_individual boolean,
    req_nonindividual boolean,
    subcategory character varying(255),
    sname character varying(255),
    isactive boolean NOT NULL DEFAULT false,
    isdeleted boolean NOT NULL DEFAULT false,
    extra_info jsonb DEFAULT '{}'::jsonb
);

CREATE INDEX IF NOT EXISTS idx_prooftypes_isactive ON prooftypes(isactive);

CREATE INDEX IF NOT EXISTS idx_prooftypes_isdeleted ON prooftypes(isdeleted);

ALTER TABLE prooftypes
    ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ(6) DEFAULT NOW(),
    ADD COLUMN IF NOT EXISTS created_by BIGINT,
    ADD COLUMN IF NOT EXISTS modified_at TIMESTAMPTZ(6) DEFAULT NOW(),
    ADD COLUMN IF NOT EXISTS modified_by BIGINT,
    ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMPTZ(6) DEFAULT NOW(),
    ADD COLUMN IF NOT EXISTS deleted_by BIGINT;

ALTER TABLE prooftypes DROP CONSTRAINT IF EXISTS prooftypes_created_by_fkey;
ALTER TABLE prooftypes DROP CONSTRAINT IF EXISTS prooftypes_modified_by_fkey;
ALTER TABLE prooftypes DROP CONSTRAINT IF EXISTS prooftypes_deleted_by_fkey;

ALTER TABLE prooftypes
    ADD CONSTRAINT prooftypes_created_by_fkey FOREIGN KEY (created_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
    ADD CONSTRAINT prooftypes_modified_by_fkey FOREIGN KEY (modified_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
    ADD CONSTRAINT prooftypes_deleted_by_fkey FOREIGN KEY (deleted_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>992</xloc>
      <yloc>176</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>v2_migration_log</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS migration_log (

	id 				BIGSERIAL PRIMARY KEY,
    batch_id 		TIMESTAMP,
    level 			CHARACTER VARYING,
    table_type 		CHARACTER VARYING,
    table_name_v1 	CHARACTER VARYING,
    table_name_v2 	CHARACTER VARYING,
    last_id 		BIGINT,
    start_id 		BIGINT,
    end_id 			BIGINT,
    start_time 		TIMESTAMP,
    end_time 		TIMESTAMP,
    log 			JSONB
);</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>240</xloc>
      <yloc>176</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>v1_migration_log</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS migration_log (
	
	id 				BIGSERIAL PRIMARY KEY,
    batch_id 		TIMESTAMP, --current time
    level 			CHARACTER VARYING,	--info, debug, notice
    table_type 		CHARACTER VARYING,	--master, transaction
    table_name_v1 	CHARACTER VARYING,	
    table_name_v2 	CHARACTER VARYING,	--v2 table
    last_id 		BIGINT,				--max id
    start_id 		BIGINT,				--max id + 1
    end_id 			BIGINT,				--max id after migration
    start_time 		TIMESTAMP,			--migration start
    end_time 		TIMESTAMP,			--migration end
    log 			JSONB				--success/error msg
);</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>80</xloc>
      <yloc>176</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>create_country</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS country
(
    id SERIAL PRIMARY KEY,
    code character varying(3) NOT NULL,
    isocode2 character varying(3),
    isocode3 character varying(3),
    isocodenum character varying(3),
    kracode character varying(3),
    okracode character varying(3),
    fatcakracode character varying(3),
    fatcaokracode character varying(3),
    micode character varying(3),
    rtacode character varying(3),
    miicode character varying(3),
    isfatca boolean NOT NULL,
    ismi boolean NOT NULL,
    isrta boolean NOT NULL,
    name character varying(100),
    extra_info jsonb DEFAULT '{}'::jsonb,
    v1_code character varying(3),
    isactive boolean NOT NULL DEFAULT false,
    isdeleted boolean NOT NULL DEFAULT false,
    created_at timestamp(6) with time zone DEFAULT now(),
    created_by bigint,
    modified_at timestamp(6) with time zone DEFAULT now(),
    modified_by bigint,
    deleted_at timestamp(6) with time zone,
    deleted_by character varying(100) COLLATE pg_catalog."default" DEFAULT 'underscoresystem'::character varying,
    CONSTRAINT country_created_by_fkey FOREIGN KEY (created_by)
        REFERENCES users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT country_modified_by_fkey FOREIGN KEY (modified_by)
        REFERENCES users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

CREATE UNIQUE INDEX IF NOT EXISTS idx_country_code ON country(code);

CREATE INDEX IF NOT EXISTS idx_country_isactive ON country(isactive);

CREATE INDEX IF NOT EXISTS idx_country_isdeleted ON country(isdeleted);

CREATE INDEX IF NOT EXISTS idx_country_kracode ON country(kracode);

CREATE INDEX IF NOT EXISTS idx_country_okracode ON country(okracode);

ALTER TABLE country ALTER COLUMN deleted_by DROP DEFAULT;

ALTER TABLE country ALTER COLUMN deleted_by TYPE bigint USING deleted_by::bigint;

--ALTER TABLE country ALTER COLUMN deleted_by SET DEFAULT 0;

ALTER TABLE country DROP CONSTRAINT IF EXISTS country_deleted_by_fkey;

ALTER TABLE country ADD CONSTRAINT country_deleted_by_fkey
    FOREIGN KEY (deleted_by)
    REFERENCES users (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>400</xloc>
      <yloc>176</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>create_state</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS state
(
    id SERIAL PRIMARY KEY,
    code character varying(10) NOT NULL,
    kracode character varying(3),
    okracode character varying(3),
    micode character varying(3),
    rtacode character varying(3),
    miicode character varying(3),
    name character varying(255) NOT NULL,
    country_id bigint NOT NULL,
    ismi boolean NOT NULL,
    isrta boolean NOT NULL,
    extra_info jsonb DEFAULT '{}'::jsonb,
    v1_code character varying(3) NOT NULL,
    isactive boolean NOT NULL DEFAULT false,
    isdeleted boolean NOT NULL DEFAULT false,
    created_at timestamp(6) with time zone DEFAULT now(),
    created_by bigint,
    modified_at timestamp(6) with time zone DEFAULT now(),
    modified_by bigint,
    deleted_at timestamp(6) with time zone,
    deleted_by character varying(100) COLLATE pg_catalog."default" DEFAULT 'underscoresystem'::character varying,
    CONSTRAINT state_country_id_code_key UNIQUE (country_id, code),
    CONSTRAINT state_created_by_fkey FOREIGN KEY (created_by)
        REFERENCES users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT state_modified_by_fkey FOREIGN KEY (modified_by)
        REFERENCES users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);


CREATE UNIQUE INDEX IF NOT EXISTS idx_state_code ON state(code);

CREATE INDEX IF NOT EXISTS idx_state_isactive ON state(isactive);

CREATE INDEX IF NOT EXISTS idx_state_isdeleted ON state(isdeleted);

CREATE INDEX IF NOT EXISTS idx_state_kracode ON state(kracode);

CREATE INDEX IF NOT EXISTS idx_state_okracode ON state(okracode);

ALTER TABLE state ALTER COLUMN deleted_by DROP DEFAULT;

ALTER TABLE state ALTER COLUMN deleted_by TYPE bigint USING deleted_by::bigint;

--ALTER TABLE state ALTER COLUMN deleted_by SET DEFAULT 0;

ALTER TABLE state DROP CONSTRAINT IF EXISTS state_deleted_by_fkey;

ALTER TABLE state ADD CONSTRAINT state_deleted_by_fkey
    FOREIGN KEY (deleted_by)
    REFERENCES users (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>560</xloc>
      <yloc>176</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>create_city</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS city
(
    id SERIAL PRIMARY KEY,
    name character varying(255) NOT NULL,
    state_id bigint NOT NULL,
    country_id bigint NOT NULL,
    v1_code character varying(3),
    isactive boolean NOT NULL DEFAULT false,
    isdeleted boolean NOT NULL DEFAULT false,
    created_at timestamp(6) with time zone DEFAULT now(),
    created_by bigint,
    modified_at timestamp(6) with time zone DEFAULT now(),
    modified_by bigint,
    deleted_at timestamp(6) with time zone,
    deleted_by character varying(100) COLLATE pg_catalog."default" DEFAULT 'underscoresystem'::character varying,
    extra_info jsonb DEFAULT '{}'::jsonb,
    CONSTRAINT city_country_id_name_key UNIQUE (country_id, name),
    CONSTRAINT city_state_id_name_key UNIQUE (state_id, name),
    CONSTRAINT city_created_by_fkey FOREIGN KEY (created_by)
        REFERENCES users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT city_modified_by_fkey FOREIGN KEY (modified_by)
        REFERENCES users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

CREATE INDEX IF NOT EXISTS idx_city_isactive ON city(isactive);

CREATE INDEX IF NOT EXISTS idx_city_isdeleted ON city(isdeleted);

ALTER TABLE city ALTER COLUMN deleted_by DROP DEFAULT;

ALTER TABLE city ALTER COLUMN deleted_by TYPE bigint USING deleted_by::bigint;

--ALTER TABLE city ALTER COLUMN deleted_by SET DEFAULT 0;

ALTER TABLE city DROP CONSTRAINT IF EXISTS city_deleted_by_fkey;

ALTER TABLE city ADD CONSTRAINT city_deleted_by_fkey
    FOREIGN KEY (deleted_by)
    REFERENCES users (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>704</xloc>
      <yloc>176</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>create_postalcode</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS postalcode
(
    id SERIAL PRIMARY KEY,
    pincode character varying(255) NOT NULL,
    city_id bigint,
    country_id bigint NOT NULL,
    state_id bigint,
    v1_code character varying(5),
    isactive boolean NOT NULL DEFAULT false,
    isdeleted boolean NOT NULL DEFAULT false,
    created_at timestamp(6) with time zone DEFAULT now(),
    created_by bigint,
    modified_at timestamp(6) with time zone DEFAULT now(),
    modified_by bigint,
    deleted_at timestamp(6) with time zone,
    deleted_by character varying(100) COLLATE pg_catalog."default" DEFAULT 'underscoresystem'::character varying,
    extra_info jsonb DEFAULT '{}'::jsonb,
    CONSTRAINT postalcode_created_by_fkey FOREIGN KEY (created_by)
        REFERENCES users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT postalcode_modified_by_fkey FOREIGN KEY (modified_by)
        REFERENCES users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

CREATE INDEX IF NOT EXISTS idx_postalcode_isactive ON postalcode(isactive);

CREATE INDEX IF NOT EXISTS idx_postalcode_isdeleted ON postalcode(isdeleted);

ALTER TABLE postalcode ALTER COLUMN deleted_by DROP DEFAULT;

ALTER TABLE postalcode ALTER COLUMN deleted_by TYPE bigint USING deleted_by::bigint;

--ALTER TABLE postalcode ALTER COLUMN deleted_by SET DEFAULT 0;

ALTER TABLE postalcode DROP CONSTRAINT IF EXISTS postalcode_deleted_by_fkey;

ALTER TABLE postalcode ADD CONSTRAINT postalcode_deleted_by_fkey
    FOREIGN KEY (deleted_by)
    REFERENCES users (id)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>832</xloc>
      <yloc>176</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>create_bizenums</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS bizenums (
    id              SERIAL PRIMARY KEY,
    class_type      VARCHAR,
    code            VARCHAR(30),
    kracode         VARCHAR(30),
    okracode        VARCHAR(30),
	rtacode         VARCHAR(30),
	micode          VARCHAR(30),
	miicode         VARCHAR(30),
    description     VARCHAR,
    extra_info      JSONB DEFAULT '{}',
    v1_code         VARCHAR(255),
    seq             INTEGER DEFAULT 0,
    sname           VARCHAR(255),
    isactive        BOOLEAN NOT NULL DEFAULT FALSE,
    isdeleted       BOOLEAN NOT NULL DEFAULT FALSE,
    created_at      TIMESTAMPTZ(6) DEFAULT NOW(),
    created_by      BIGINT REFERENCES users(id),
    modified_at     TIMESTAMPTZ(6) DEFAULT NOW(),
    modified_by     BIGINT REFERENCES users(id),
    deleted_at      TIMESTAMPTZ(6),
    deleted_by      BIGINT
);

CREATE INDEX IF NOT EXISTS idx_bizenums_class_type_code ON bizenums(class_type, code);

CREATE INDEX IF NOT EXISTS idx_bizenums_class_type_okracode ON bizenums(class_type, okracode);

CREATE UNIQUE INDEX IF NOT EXISTS idx_bizenums_kracode ON bizenums(class_type, kracode);

CREATE INDEX IF NOT EXISTS idx_bizenums_class_type ON bizenums(class_type);

CREATE INDEX IF NOT EXISTS idx_bizenums_isactive ON bizenums(isactive);

CREATE INDEX IF NOT EXISTS idx_bizenums_isdeleted ON bizenums(isdeleted);

ALTER TABLE bizenums ALTER COLUMN created_by DROP DEFAULT;
ALTER TABLE bizenums ALTER COLUMN modified_by DROP DEFAULT;
ALTER TABLE bizenums ALTER COLUMN deleted_by DROP DEFAULT;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1136</xloc>
      <yloc>176</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>create_capabilities</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS capabilities
(
    id SERIAL PRIMARY KEY,
    audit_trail jsonb,
    cap_group character varying(100),
    cap_info character varying(255) NOT NULL,
    cap_order integer,
    description character varying(255) NOT NULL,
    entity_type character varying(255),
    is_active boolean,
    is_api boolean,
    is_console boolean,
    is_immutable boolean,
    name character varying(100) NOT NULL,
    extra_info jsonb
);

ALTER TABLE capabilities
    ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ(6) DEFAULT NOW(),
    ADD COLUMN IF NOT EXISTS created_by BIGINT,
    ADD COLUMN IF NOT EXISTS modified_at TIMESTAMPTZ(6) DEFAULT NOW(),
    ADD COLUMN IF NOT EXISTS modified_by BIGINT,
    ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMPTZ(6),
    ADD COLUMN IF NOT EXISTS deleted_by BIGINT;

ALTER TABLE capabilities DROP CONSTRAINT IF EXISTS capabilities_created_by_fkey;
ALTER TABLE capabilities DROP CONSTRAINT IF EXISTS capabilities_modified_by_fkey;
ALTER TABLE capabilities DROP CONSTRAINT IF EXISTS capabilities_deleted_by_fkey;

ALTER TABLE capabilities
    ADD CONSTRAINT capabilities_created_by_fkey FOREIGN KEY (created_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
    ADD CONSTRAINT capabilities_modified_by_fkey FOREIGN KEY (modified_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
    ADD CONSTRAINT capabilities_deleted_by_fkey FOREIGN KEY (deleted_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1136</xloc>
      <yloc>336</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>create_roles</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS roles
(
    id SERIAL PRIMARY KEY,
    audit_trail jsonb,
    description character varying(255) NOT NULL,
    is_active boolean NOT NULL,
    is_immutable boolean NOT NULL,
    name character varying(255),
    extra_info jsonb,
    entity_id character varying(100),
    entity_type character varying(100),
    tag_id character varying(100)
);

ALTER TABLE roles
    ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ(6) DEFAULT NOW(),
    ADD COLUMN IF NOT EXISTS created_by BIGINT,
    ADD COLUMN IF NOT EXISTS modified_at TIMESTAMPTZ(6) DEFAULT NOW(),
    ADD COLUMN IF NOT EXISTS modified_by BIGINT,
    ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMPTZ(6),
    ADD COLUMN IF NOT EXISTS deleted_by BIGINT;

ALTER TABLE roles DROP CONSTRAINT IF EXISTS roles_created_by_fkey;
ALTER TABLE roles DROP CONSTRAINT IF EXISTS roles_modified_by_fkey;
ALTER TABLE roles DROP CONSTRAINT IF EXISTS roles_deleted_by_fkey;

ALTER TABLE roles
    ADD CONSTRAINT roles_created_by_fkey FOREIGN KEY (created_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
    ADD CONSTRAINT roles_modified_by_fkey FOREIGN KEY (modified_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
    ADD CONSTRAINT roles_deleted_by_fkey FOREIGN KEY (deleted_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>992</xloc>
      <yloc>336</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>create_capability_role_map</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS capability_role_map
(
    id SERIAL PRIMARY KEY,
    audit_trail jsonb,
    cap_id integer NOT NULL,
    role_id integer NOT NULL,
    extra_info jsonb,
    CONSTRAINT fk3i4kb005fwhq6oipgvxfmk3ya FOREIGN KEY (role_id)
        REFERENCES roles (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT fknt2eraftiwjhak2ns3qgbno0s FOREIGN KEY (cap_id)
        REFERENCES capabilities (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

ALTER TABLE capability_role_map
    ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ(6) DEFAULT NOW(),
    ADD COLUMN IF NOT EXISTS created_by BIGINT,
    ADD COLUMN IF NOT EXISTS modified_at TIMESTAMPTZ(6) DEFAULT NOW(),
    ADD COLUMN IF NOT EXISTS modified_by BIGINT,
    ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMPTZ(6),
    ADD COLUMN IF NOT EXISTS deleted_by BIGINT;

ALTER TABLE capability_role_map DROP CONSTRAINT IF EXISTS capability_role_map_created_by_fkey;
ALTER TABLE capability_role_map DROP CONSTRAINT IF EXISTS capability_role_map_modified_by_fkey;
ALTER TABLE capability_role_map DROP CONSTRAINT IF EXISTS capability_role_map_deleted_by_fkey;


ALTER TABLE capability_role_map
    ADD CONSTRAINT capability_role_map_created_by_fkey FOREIGN KEY (created_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
    ADD CONSTRAINT capability_role_map_modified_by_fkey FOREIGN KEY (modified_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
    ADD CONSTRAINT capability_role_map_deleted_by_fkey FOREIGN KEY (deleted_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>848</xloc>
      <yloc>336</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>create_visibility_classification</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS visibility_classification
(
    id SERIAL PRIMARY KEY,
    audit_trail jsonb NOT NULL,
    level integer,
    orders integer,
    parent_id bigint,
    path character varying(255),
    visibility_id character varying(30) NOT NULL,
    visibility_name character varying(100) NOT NULL,
    extra_info jsonb
);

ALTER TABLE visibility_classification
    ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ(6) DEFAULT NOW(),
    ADD COLUMN IF NOT EXISTS created_by BIGINT,
    ADD COLUMN IF NOT EXISTS modified_at TIMESTAMPTZ(6) DEFAULT NOW(),
    ADD COLUMN IF NOT EXISTS modified_by BIGINT,
    ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMPTZ(6),
    ADD COLUMN IF NOT EXISTS deleted_by BIGINT;

ALTER TABLE visibility_classification DROP CONSTRAINT IF EXISTS visibility_classification_created_by_fkey;
ALTER TABLE visibility_classification DROP CONSTRAINT IF EXISTS visibility_classification_modified_by_fkey;
ALTER TABLE visibility_classification DROP CONSTRAINT IF EXISTS visibility_classification_deleted_by_fkey;


ALTER TABLE visibility_classification
    ADD CONSTRAINT visibility_classification_created_by_fkey FOREIGN KEY (created_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
    ADD CONSTRAINT visibility_classification_modified_by_fkey FOREIGN KEY (modified_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
    ADD CONSTRAINT visibility_classification_deleted_by_fkey FOREIGN KEY (deleted_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>656</xloc>
      <yloc>336</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>create_receligibility</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS receligibility
(
    kyctype character varying(255) NOT NULL,
    data character varying(255) NOT NULL,
    document character varying(255) NOT NULL,
    ispoipoaadhar character varying(255) NOT NULL,
    xmlrequired character varying(255) NOT NULL,
    eligibility character varying(255) NOT NULL,
    extra_info jsonb
);

ALTER TABLE receligibility
    ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ(6) DEFAULT NOW(),
    ADD COLUMN IF NOT EXISTS created_by BIGINT,
    ADD COLUMN IF NOT EXISTS modified_at TIMESTAMPTZ(6) DEFAULT NOW(),
    ADD COLUMN IF NOT EXISTS modified_by BIGINT,
    ADD COLUMN IF NOT EXISTS deleted_at TIMESTAMPTZ(6),
    ADD COLUMN IF NOT EXISTS deleted_by BIGINT;


ALTER TABLE receligibility DROP CONSTRAINT IF EXISTS receligibility_created_by_fkey;
ALTER TABLE receligibility DROP CONSTRAINT IF EXISTS receligibility_modified_by_fkey;
ALTER TABLE receligibility DROP CONSTRAINT IF EXISTS receligibility_deleted_by_fkey;



ALTER TABLE receligibility
    ADD CONSTRAINT receligibility_created_by_fkey FOREIGN KEY (created_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
    ADD CONSTRAINT receligibility_modified_by_fkey FOREIGN KEY (modified_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION,
    ADD CONSTRAINT receligibility_deleted_by_fkey FOREIGN KEY (deleted_by) REFERENCES users(id) ON UPDATE NO ACTION ON DELETE NO ACTION;
</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>496</xloc>
      <yloc>336</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>create_itd_pan_status</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>N</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS itd_pan_status
(
    id bigint NOT NULL DEFAULT nextval('itd_pan_status_id_seq'::regclass),
    entity_id bigint,
    entity_type character varying(255),
    lastverifiedat timestamp(6) without time zone,
    pan character varying(10),
    validinfo jsonb,
    extra_info jsonb
)



</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>368</xloc>
      <yloc>336</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>create_kycinternalstatusmap</name>
    <type>ExecSQL</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>KRA_HOP_db</connection>
    <execute_each_row>N</execute_each_row>
    <single_statement>Y</single_statement>
    <replace_variables>N</replace_variables>
    <quoteString>N</quoteString>
    <sql>CREATE TABLE IF NOT EXISTS kycinternalstatusmap
(
    id integer NOT NULL,
    internal_status character varying(255) NOT NULL,
    code character varying,
    is_mod_status boolean DEFAULT false,
    external_status character varying(255) NOT NULL,
    extra_info jsonb,
    okra_code character varying,
    external_status_api character varying(255)
);</sql>
    <set_params>N</set_params>
    <insert_field/>
    <update_field/>
    <delete_field/>
    <read_field/>
    <arguments>
    </arguments>
    <attributes/>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>208</xloc>
      <yloc>336</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step_error_handling>
  </step_error_handling>
  <slave-step-copy-partition-distribution>
  </slave-step-copy-partition-distribution>
  <slave_transformation>N</slave_transformation>
  <attributes/>
</transformation>
